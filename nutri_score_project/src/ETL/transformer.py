import pandas as pd
import spacy
from spacy.matcher import PhraseMatcher
import re

# Charger le mod√®le fran√ßais
nlp = spacy.load("fr_core_news_sm")

# üü¢ Bons ingr√©dients
GOOD_INGREDIENTS = [
    "pomme de terre", "patate douce", "betterave", "carotte", "courge", "pois", "ma√Øs", "pois chiche",
    "bl√© complet", "riz complet", "avoine", "quinoa", "orge", "√©peautre", "millet",
    "amande", "noix", "noisette", "cacahu√®te", "pistache", "graines de tournesol",
    "graines de courge", "graines de lin", "graines de s√©same",
    "lentille", "haricot", "pois cass√©", "paprika", "curcuma", "cumin", "piment", "ail", "oignon",
    "herbes de Provence", "thym", "romarin",
    "sel marin", "sel de mer", "huile d'olive", "huile de colza", "huile de tournesol non raffin√©e"
]

# üî¥ Mauvais ingr√©dients
BAD_INGREDIENTS = [
    "sucre", "glucose", "fructose", "saccharose", "maltose", "maltodextrine",
    "sirop de glucose", "sirop de ma√Øs", "sirop de fructose", "sirop inverti",
    "sirop d'agave", "huile de palme", "huile de coco raffin√©e", "huile de soja raffin√©e",
    "huile v√©g√©tale partiellement hydrog√©n√©e", "margarine industrielle",
    "graisse v√©g√©tale hydrog√©n√©e", "farine raffin√©e", "farine blanche",
    "produit instantan√©", "ar√¥mes artificiels", "ar√¥me artificiel", "ar√¥me synth√©tique",
    "exhausteur de go√ªt", "stabilisant chimique", "√©mulsifiant industriel",
    "agent de conservation", "gomme xanthane synth√©tique", "colorant artificiel",
    "concentr√© de jus industriel", "produit enrichi artificiellement", "poudre aromatis√©e",
    "boisson instantan√©e sucr√©e", "prot√©ines v√©g√©tales textur√©es", "sirop de riz",
    "huile partiellement hydrog√©n√©e"
]

# Regex pour E-numbers
E_NUMBER_PATTERN = re.compile(r"\bE\d{2,3}\b", re.IGNORECASE)

# PhraseMatchers
matcher_good = PhraseMatcher(nlp.vocab, attr="LOWER")
matcher_bad = PhraseMatcher(nlp.vocab, attr="LOWER")
matcher_good.add("GOOD", [nlp(text) for text in GOOD_INGREDIENTS])
matcher_bad.add("BAD", [nlp(text) for text in BAD_INGREDIENTS])

def score_ingredients_spacy(text: str) -> int:
    if not text or pd.isna(text):
        return 0
    doc = nlp(str(text).lower())
    score = len(matcher_good(doc)) - len(matcher_bad(doc)) - len(E_NUMBER_PATTERN.findall(str(text)))
    return score

def nutriscore_plus_spacy_row(row: pd.Series) -> int:
    score = 0
    # Ingr√©dients
    ingredients_text = row.get("ingredients_text", "")
    score += score_ingredients_spacy(ingredients_text)
    # NOVA
    nova = row.get("nova_group", 4)
    try:
        nova = int(nova)
    except (ValueError, TypeError):
        nova = 4
    score -= (nova - 1) * 2
    # Labels
    labels = row.get("labels_tags", [])
    if not isinstance(labels, list):
        labels = []
    if any("bio" in str(l).lower() for l in labels):
        score += 3
    if any("label-rouge" in str(l).lower() for l in labels):
        score += 2
    return score

def clean_and_add_nutriscore_plus(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    
    # Ajouter la colonne nutriscore_plus
    df['nutriscore_plus'] = df.apply(nutriscore_plus_spacy_row, axis=1)
    
    # Colonnes num√©riques
    int_cols = ['nova_group', 'ecoscore_score']
    for col in int_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)
    
    # Colonnes listes ‚Üí convertir chaque √©l√©ment en string puis joindre
    list_cols = [
        'ingredients', 'additives_tags', 'labels_tags', 
        'origins_tags', 'countries_tags', 'manufacturing_places_tags', 'packaging_tags'
    ]
    for col in list_cols:
        if col in df.columns:
            df[col] = df[col].apply(
                lambda x: ', '.join([str(i) for i in x]) if isinstance(x, list) 
                else (str(x) if pd.notna(x) else "")
            )
    
    # Colonnes objets restantes ‚Üí remplacer NaN par cha√Æne vide
    object_cols = df.select_dtypes(include='object').columns.tolist()
    for col in object_cols:
        df[col] = df[col].fillna('')
    
    # Debug
    print("ceci est le df transfo :\n", df.head())
    print("\nles types :\n", df.dtypes)
    print("\ninfo :")
    df.info()
    
    return df
